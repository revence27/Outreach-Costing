.regions
  .region
    - @districts.each do |dist|
      .district
        .districtname
          = dist.name
          District &nbsp; &nbsp; &nbsp;
          = surround '(', ')' do
            = number_to_human dist.district_data.population
            people,
            = number_with_delimiter dist.district_data.number_sub_counties
            sub-counties,
            = number_with_delimiter dist.district_data.number_parishes
            parishes,
            = number_with_delimiter([dist.district_data.number_venues, dist.district_data.number_parishes].max)
            places of worship
        %table
          %thead
            %th{:colspan => 2}
              Demographics
          %tbody
            %tr
              %td{:class => 'heading'}
                Total population
              %td{:class => 'data'}
                = number_with_delimiter dist.district_data.population
            %tr
              %td{:class => 'heading'}
                Total under one year
              %td{:class => 'data'}
                = number_with_delimiter dist.district_data.under_one
            %tr
              %td{:class => 'heading'}
                Total population 1-4 years
              %td{:class => 'data'}
                = number_with_delimiter dist.district_data.one_to_four
            %tr
              %td{:class => 'heading'}
                Estimated annual pregnancies
              %td{:class => 'data'}
                = number_with_delimiter dist.district_data.pregnancies
            %tr
              %td{:class => 'heading'}
                Expected HIV+ pregnancies
              %td{:class => 'data'}
                - val = Assumption.exec :hiv_preg, dist
                = number_with_delimiter val.ceil
            %tr
              %td{:class => 'heading'}
                Expected HIV+ children
              %td{:class => 'data'}
                - val = Assumption.exec :hiv_preg, dist
                = number_with_delimiter val.ceil
        %table
          - final_total = 0.0
          - if @bdr then
            %thead
              %th{:colspan => 2}
                = @bdr.name
            %tbody
            - bdr_tot = 0.0
            - @bdr_parts.each do |part|
              %tr
                - ans = Assumption.exec part.last, dist
                %td{:class => 'heading'}
                  = part.first
                %td{:class => 'data'}
                  = precede '$' do
                    = number_with_delimiter ans.ceil
              - bdr_tot = bdr_tot + Assumption.exec(%[#{part.last}_cost], dist)
            %tr{:class => 'sumrow'}
              %td{:class => 'heading'}
                Total Cost for Birth and Death Registration
              %td{:class => 'data'}
                = precede '$' do
                  = number_with_delimiter bdr_tot.round(2)
            - final_total = final_total + bdr_tot
          - if @management then
            %thead
              %th{:colspan => 2}
                = @management.name
            %tbody
            - man_tot = 0.0
            - @man_parts.each do |part|
              %tr
                - ans = Functions.send(part.name, nil, dist)
                %td{:class => 'heading'}
                  = part.description
                %td{:class => 'data'}
                  = precede '$' do
                    = number_with_delimiter ans.ceil
              - man_tot = man_tot + ans
            %tr{:class => 'sumrow'}
              %td{:class => 'heading'}
                Total Cost for Associated Logistics
              %td{:class => 'data'}
                = precede '$' do
                  = number_with_delimiter man_tot.round(2)
            - final_total = final_total + man_tot
          - @partitions.each do |partition|
            %thead
              %th{:colspan => 2}
                = partition.first
            %tbody
              - if partition.last == :overall then
                %tr{:class => 'sumrow'}
                  %td{:class => 'heading'}
                    Overall Total Cost for Implementation
                  %td{:class => 'data'}
                    = precede '$' do
                      = number_with_delimiter final_total.round(2)
              - else
                - mass_total = 0.0
                - @components.each do |component|
                  %tr
                    %td{:colspan => 2, :class => 'smallhead'}
                      = component.name
                  - component.chosen_activities(@data).each do |activity|
                    - my_items = activity.chosen_items(@data)
                    - my_items.each do |item|
                      %tr
                        %td{:class => 'heading'}
                          = item.description
                        %td{:class => 'data'}
                          = precede([:esti].member?(partition.last) ? '$' : '') do
                            = number_with_delimiter (item.assumption(component.name, partition.last).calculate(dist) * (partition.last.to_s =~ /^q\d$/ ? Assumption.find_by_label(:quarters).value : 1.0)).ceil
                    - if partition.last == :esti then
                      - my_items.select {|it| it.associated_items.count > 0}.each do |item|
                        - raise Exception.new('TODO! We have associated items!')
                        - item.associated_items.each do |asit|
                          %tr
                            %td{:class => 'heading'}
                              = asit.description
                            %td{:class => 'data'}
                              = precede '$' do
                                = number_with_delimiter asit.assumption(component.name, partition.last).calculate(dist).ceil
                      - val = Assumption.exec :annual_total, dist, my_items
                      - mass_total = mass_total + val
                - if partition.last == :esti
                  - final_total = final_total + mass_total
                  %tr{:class => 'sumrow'}
                    %td{:class => 'heading'}
                      Total
                    %td{:class => 'data'}
                      = precede '$' do
                        = number_with_delimiter mass_total.round(2)
                  %tr
                    %td{:class => 'heading'}
                      Cost for 10% Wastage
                    %td{:class => 'data'}
                      = precede '$' do
                        - val = Assumption.exec :wastage, dist, mass_total
                        - final_total = final_total + val
                        = number_with_delimiter val.round(2)
